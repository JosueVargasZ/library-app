import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { registerUser, loginUser, logoutUser } from '../../API/booksAPI';

const initialState = {
  user: {},
  isLoggedIn: false,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const registerAsync = createAsyncThunk(
  'auth/authRegisterUser',
  async (user) => {
    const response = await registerUser(user); 
    // The value we return becomes the `fulfilled` action payload
    localStorage.setItem("user",JSON.stringify(response));
    return response;
  }
);

export const loginAsync = createAsyncThunk(
  'auth/authLoginUser',
  async (user) => {
    const response = await loginUser(user); 
    // The value we return becomes the `fulfilled` action payload
    localStorage.setItem("user",JSON.stringify(response));
    return response;
  }
);

export const logoutAsync = createAsyncThunk(
  'auth/authLogoutUser',
  async (token) => {
    const response = await logoutUser(token); 
    // The value we return becomes the `fulfilled` action payload
    localStorage.removeItem("user");
    return response;
  }
);

export const authSlice = createSlice({
  name: 'auth',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    loginFromLocalStorage: (state)=>{
      if(localStorage.getItem("user")){
        state.user = JSON.parse( localStorage.getItem("user") );
        state.isLoggedIn = true;
      }
      state.status = 'idle';
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  
  extraReducers: (builder) => {
    builder
      .addCase(registerAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(registerAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.isLoggedIn = true;
        state.user = {...action.payload};
      })
      .addCase(loginAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(loginAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.isLoggedIn = true;
        state.user = {...action.payload};
      })
      .addCase(logoutAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(logoutAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.isLoggedIn = false;
        state.user = {};
      });
  },
});

export const { loginFromLocalStorage } = authSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectAuth = (state) => state.auth.user;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

// export const incrementIfOdd = (amount) => (dispatch, getState) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default authSlice.reducer;
